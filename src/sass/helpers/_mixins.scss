@mixin responsive-ratio($x,$y, $pseudo: false) {
	$padding: unquote(( $y / $x ) * 100 + '%');
	@if $pseudo {
		&:before {
			@include pseudo($pos: relative);
			width: 100%;
			padding-top: $padding;
		}
	} @else {
		padding-top: $padding;
	}
}

@mixin chain( $arguments... ) {
	@for $i from 1 through (length( $arguments ) - 1) {
		$property: nth($arguments, $i);
		#{$property}: nth($arguments, length($arguments));
	}
}

@mixin progress-bar-value {
	&::-webkit-progress-value {
		@content;
	}

	&::-moz-progress-bar {
		@content;
	}
}

@mixin border-top-radius( $arg ) {
	@include chain(border-top-left-radius, border-top-right-radius, $arg);
}

@mixin border-bottom-radius( $arg ) {
	@include chain(border-bottom-left-radius, border-bottom-right-radius, $arg);
}

@mixin thumb-styling( $background, $size ) {
	background: $background;
	@include chain(width, height, $size);
	cursor: pointer; // Don't extend or the selector won't work
	border-radius: 50%;
	border: none;
	z-index: 2;
}

@mixin thumb-selector( $margin ) {
	&::-webkit-slider-thumb {
		-webkit-appearance: none;
		margin: $margin;
		@content;
	}

	&::-moz-range-thumb {
		@content;
	}

	&::-ms-thumb {
		@content;
	}
}

@mixin track-styling( $height, $background ) {
	width: 100%;
	height: $height;
	background: $background;
	cursor: pointer; // Don't extend or the selector won't work
	z-index: 0;
}

@mixin track-selector() {
	&::-webkit-slider-runnable-track {
		@content;
	}

	&::-moz-range-track {
		@content;
	}

	& ::-ms-track {
		@content;
		@include chain(background, border-color, color, transparent);
	}
}

@mixin overlay( $depth ) {
	@if(not in-array($depth, $elevation-overlay)) {
		@error '#{$depth} not available';
	}

	&:before {
		content: '';
		@include chain(top, left, 0);
		@include chain(width, height, 100%);
		position: absolute;
		$alpha: map_get($elevation-overlay, $depth);
		background: rgba($white, $alpha);
		transition: background $easing-standard .1s;
		pointer-events: none;
		// TODO fix height to equal to that of the parent
	}
}

@mixin dark-theme( $class ) {
	@if($theme == light and in-array(dark, $media-themes)) {
		.#{$class} {
			@media #{$dark} {
				@content;
			}
		}
	}

	@if($theme == light and in-array(dark, $class-themes)) {
		.#{$class}--dark, .dark.#{$class}, .dark .#{$class} {
			@content;
		}
	}
}

@mixin light-theme( $class ) {
	@if($theme == dark and in-array(light, $media-themes)) {
		.#{$class} {
			@media #{$light} {
				@content;
			}
		}
	}

	@if($theme == dark and in-array(light, $class-themes)) {
		.#{$class}--light, .light.#{$class}, .light .#{$class} {
			@content;
		}
	}
}
