@use './../index';
@use './../foundation/settings';
@use './media-queries';
@use './../properties/display';

.container {
	--container--large-width: 80%;

	$el: &;
	margin-top: var(--app-bar-height);
	width: 100%;
	padding: var(--margin) 0;

	@media #{media-queries.$sm-up} {
		width: var(--container--large-width);
		margin: var(--app-bar-height) calc((100% - var(--container--large-width)) / 2) 0 calc((100% - var(--container--large-width)) / 2);
	}

	@if(index.in-array(fluid, index.$grid-settings)) {
		&--fluid {
			width: 100%;
			margin: var(--app-bar-height) 0 0 0;
		}
	}

	@if(index.in-array(fixed, index.$drawer-settings)) {
		&-drawer--fixed {
			@media #{media-queries.$sm-up} {
				margin: var(--app-bar-height) calc((100% - var(--container--large-width)) / 2) 0 calc(calc((100% - var(--container--large-width)) / 2) + var(--drawer-width));
				width: calc(var(--container--large-width) - var(--drawer-width));
			}
		}
	}

	@if(index.in-array(fluid, index.$grid-settings) and index.in-array(fixed, index.$drawer-settings)) {
		&--fluid#{$el}-drawer--fixed {
			@media #{media-queries.$sm-up} {
				width: calc(100% - var(--drawer-width));
				margin: var(--app-bar-height) 0 0 var(--drawer-width);
			}
		}
	}
}

.row {
	@extend %display--grid;
	grid-template-columns: repeat(settings.$xs-columns, 1fr);
	grid-gap: var(--gutter);
	padding: calc(var(--gutter) / 2) var(--margin);

	&:first-child {
		padding: 0 var(--margin) calc(var(--gutter) / 2) var(--margin);
	}

	@if(settings.$sm-columns != settings.$xs-columns) {
		@media #{media-queries.$sm-and-up} {
			grid-template-columns: repeat(settings.$sm-columns, 1fr);
		}
	}

	@if(settings.$md-columns != settings.$xs-columns) {
		@media #{media-queries.$md-and-up} {
			grid-template-columns: repeat(settings.$md-columns, 1fr);
		}
	}

	@if(settings.$lg-columns != settings.$xs-columns) {
		@media #{media-queries.$lg-and-up} {
			grid-template-columns: repeat(settings.$lg-columns, 1fr);
		}
	}

	@if(settings.$xl-columns != settings.$xs-columns) {
		@media #{media-queries.$xl-and-up} {
			grid-template-columns: repeat(settings.$xl-columns, 1fr);
		}
	}
}

@for $i from 1 through settings.$xs-columns {
	.xs#{$i} {
		grid-column-end: span $i;
	}

	.start-xs#{$i} {
		order: $i;
		grid-column-start: $i;
	}

	@if(index.in-array(masonry, index.$grid-settings)) {
		.tall-xs#{$i} {
			grid-row-end: span $i;
		}
	}
}

@media #{media-queries.$sm-and-up} {
	@for $i from 1 through settings.$sm-columns {
		.sm#{$i} {
			grid-column-end: span $i;
		}

		.start-sm#{$i} {
			order: $i;
			grid-column-start: $i;
		}

		@if(index.in-array(masonry, index.$grid-settings)) {
			.tall-sm#{$i} {
				grid-row-end: span $i;
			}
		}
	}
}

@media #{media-queries.$md-and-up} {
	@for $i from 1 through settings.$md-columns {
		.md#{$i} {
			grid-column-end: span $i;
		}

		.start-md#{$i} {
			order: $i;
			grid-column-start: $i;
		}

		@if(index.in-array(masonry, index.$grid-settings)) {
			.tall-md#{$i} {
				grid-row-end: span $i;
			}
		}
	}
}

@media #{media-queries.$lg-and-up} {
	@for $i from 1 through settings.$lg-columns {
		.lg#{$i} {
			grid-column-end: span $i;
		}

		.start-lg#{$i} {
			order: $i;
			grid-column-start: $i;
		}

		@if(index.in-array(masonry, index.$grid-settings)) {
			.tall-lg#{$i} {
				grid-row-end: span $i;
			}
		}
	}
}

@media #{media-queries.$xl-and-up} {
	@for $i from 1 through settings.$xl-columns {
		.xl#{$i} {
			grid-column-end: span $i;
		}

		.start-xl#{$i} {
			order: $i;
			grid-column-start: $i;
		}

		@if(index.in-array(masonry, index.$grid-settings)) {
			.tall-xl#{$i} {
				grid-row-end: span $i;
			}
		}
	}
}
