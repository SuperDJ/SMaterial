@each $depth, $setting in $elevation-umbra-map {
	$umbra: map_get($elevation-umbra-map, $depth);
	$penumbra: map_get($elevation-penumbra-map, $depth);
	$ambient: map_get($elevation-ambient-map, $depth);

	$umbra-shadow: '';
	@each $px in $umbra {
		$umbra-shadow: $umbra-shadow + (if( $px == 0, 0, rem-calc( $px ) ) ) + ' ';
	}
	$umbra-shadow: $umbra-shadow + ' ' + $elevation-umbra-color;

	$penumbra-shadow: '';
	@each $px in $penumbra {
		$penumbra-shadow: $penumbra-shadow + (if( $px == 0, 0, rem-calc( $px ) ) ) + ' ';
	}
	$penumbra-shadow: $penumbra-shadow + ' ' + $elevation-penumbra-color;

	$ambient-shadow: '';
	@each $px in $ambient {
		$ambient-shadow: $ambient-shadow + (if( $px == 0, 0, rem-calc( $px ) ) ) + ' ';
	}
	$ambient-shadow: $ambient-shadow + ' ' + $elevation-ambient-color;

	%z#{$depth} {
		$shadow: $umbra-shadow + ', ' + $penumbra-shadow + ', ' + $ambient-shadow;
		box-shadow: unquote($shadow);

		@if($theme == dark and map_has_key($elevation-overlay, $depth))
		{
			@warn map_get($elevation-overlay, $depth);
			&:before {
				content: '';
				position: absolute;
				@include chain(width, height, 100%);
				@include chain(top, left, 0);
				$alpha: map_get($elevation-overlay, $depth);
				background: rgba($white, $alpha);
			}
		}
	}

	%z#{$depth}--inset {
		$shadow: 'inset ' + $umbra-shadow + ', inset ' + $penumbra-shadow + ', inset ' + $ambient-shadow;
		box-shadow: unquote($shadow);
	}

	@if(in-array(shadows, $foundation-settings)) {
		@if (in-array($depth, $shadow-settings)) {
			.z#{$depth} {
				@extend %z#{$depth};
			}

			.z#{$depth}--inset {
				@extend %z#{$depth}--inset;
			}
		}
	}
}

@if(in-array(shadows, $foundation-settings)) {
	.z0 {
		box-shadow: none !important;
	}
}