@use './settings';
@use '../helpers/functions';
@use '../helpers/mixins';

@each $depth, $setting in settings.$elevation-umbra-map {
	$umbra: map-get(settings.$elevation-umbra-map, $depth);
	$penumbra: map-get(settings.$elevation-penumbra-map, $depth);
	$ambient: map-get(settings.$elevation-ambient-map, $depth);

	$umbra-shadow: '';
	@each $px in $umbra {
		$umbra-shadow: $umbra-shadow + (if( $px == 0, 0, functions.rem-calc( $px ) ) ) + ' ';
	}
	$umbra-shadow: $umbra-shadow + ' ' + settings.$elevation-umbra-color;

	$penumbra-shadow: '';
	@each $px in $penumbra {
		$penumbra-shadow: $penumbra-shadow + (if( $px == 0, 0, functions.rem-calc( $px ) ) ) + ' ';
	}
	$penumbra-shadow: $penumbra-shadow + ' ' + settings.$elevation-penumbra-color;

	$ambient-shadow: '';
	@each $px in $ambient {
		$ambient-shadow: $ambient-shadow + (if( $px == 0, 0, functions.rem-calc( $px ) ) ) + ' ';
	}
	$ambient-shadow: $ambient-shadow + ' ' + settings.$elevation-ambient-color;

	%z#{$depth} {
		$shadow: $umbra-shadow + ', ' + $penumbra-shadow + ', ' + $ambient-shadow;
		box-shadow: unquote($shadow);
	}

	%z#{$depth}--inset {
		$shadow: 'inset ' + $umbra-shadow + ', inset ' + $penumbra-shadow + ', inset ' + $ambient-shadow;
		box-shadow: unquote($shadow);
	}

	@if(functions.in-array($depth, settings.$elevation-overlay)) {
		%overlay#{$depth} {
			@include mixins.overlay($depth);
		}
	}

	@if(functions.in-array(shadows, settings.$foundation-settings)) {
		@if (functions.in-array($depth, settings.$shadow-settings)) {
			.z#{$depth} {
				@extend %z#{$depth};
			}

			.z#{$depth}--inset {
				@extend %z#{$depth}--inset;
			}
		}
	}
}

%z0 {
	box-shadow: unset;
}

%overlay0 {
	&:before {
		content: unset;
	}
}

@if(functions.in-array(shadows, settings.$foundation-settings)) {
	.z0 {
		box-shadow: none !important;
	}
}
