@use './settings';
@use '../helpers/functions';
@use '../grid/media-queries';

@each $scale, $setting in settings.$type-scale {
	%#{$scale} {
		@if($scale == body-1 or map-get( map-get(settings.$type-scale, body-1), typeface) != map-get($setting, typeface)) {
			font-family: var(#{--#{$scale}-font-family}), sans-serif;
		}
		line-height: functions.rem-calc(( map-get( $setting, size ) * 1.4 ) + 0px);
		font-size: functions.rem-calc(map-get($setting, size) + 0px);
		font-weight: map-get($setting, font);
		text-transform: map-get($setting, case);
		letter-spacing: if(map-get( $setting, spacing ) == 0, 0, functions.rem-calc(map-get($setting, spacing) + 0px));
		margin: 0;

		@if (map-get($setting, color)) {
			color: map-get($setting, color);
		}

		@if ($scale != body-1) {
			.icon {
				--icon-size: #{functions.rem-calc(map-get($setting, size) + 0px)};
			}
		}
	}
}

@if (functions.in-array(typography, settings.$foundation-settings)) {
	@if (functions.in-array(h1, settings.$typography-settings)) {
		h1, .h1 {
			@extend %h1, %text-high;
		}
	}

	@if (functions.in-array(h2, settings.$typography-settings)) {
		h2, .h2 {
			@extend %h2, %text-high;
		}
	}

	@if (functions.in-array(h3, settings.$typography-settings)) {
		h3, .h3 {
			@extend %h3, %text-high;
		}
	}

	@if (functions.in-array(h4, settings.$typography-settings)) {
		h4, .h4 {
			@extend %h4, %text-high;
		}
	}

	@if (functions.in-array(h5, settings.$typography-settings)) {
		h5, .h5 {
			@extend %h5, %text-high;
		}
	}

	@if (functions.in-array(h6, settings.$typography-settings)) {
		h6, .h6 {
			@extend %h6, %text-high;
		}
	}

	@if (functions.in-array(subtitle-1, settings.$typography-settings)) {
		.subtitle-1 {
			@extend %subtitle-1;
		}
	}

	@if (functions.in-array(subtitle-2, settings.$typography-settings)) {
		.subtitle-2 {
			@extend %subtitle-2;
		}
	}

	@if (functions.in-array(body-1, settings.$typography-settings)) {
		body, .body-1 {
			@extend %body-1, %text-medium;
		}
	}

	@if (functions.in-array(body-2, settings.$typography-settings)) {
		.body-2 {
			@extend %body-2;
		}
	}

	@if (functions.in-array(caption, settings.$typography-settings)) {
		.caption {
			@extend %caption;
		}
	}

	@if (functions.in-array(overline, settings.$typography-settings)) {
		.overline {
			@extend %overline;
		}
	}

	@if (functions.in-array(body-1, settings.$typography-settings)) {
		p {
			@extend %body-1;
			margin: 0 0 calc(#{map-get( map-get(settings.$type-scale, body-1), size ) + 0px } * .75) 0;
		}
	}

	.text {
		@if (functions.in-array(left, settings.$typography-settings)) {
			&--left {
				text-align: left !important;
			}
		}

		@if (functions.in-array(center, settings.$typography-settings)) {
			&--center {
				text-align: center !important;
			}
		}

		@if (functions.in-array(right, settings.$typography-settings)) {
			&--right {
				text-align: right !important;
			}
		}
	}

	:root {
		--font-family: #{settings.$font-family};

		@each $scale, $setting in settings.$type-scale {
			@if (functions.in-array($scale, settings.$typography-settings)) {
				--#{$scale}-font-family: #{if( map-get( $setting, typeface ) == settings.$font-family, var(--font-family), map-get($setting, typeface) )};
			}
		}
	}
}

%text-high {
	color: rgba(settings.$font-on-background, .87);

	@if(settings.$theme == light and functions.in-array(dark, settings.$media-themes)) {
		@media #{media-queries.$dark} {
			color: rgba(settings.$dark-font-on-background, .87);
		}
	}
}

%text-medium {
	color: rgba(settings.$font-on-background, .6);

	@if(settings.$theme == light and functions.in-array(dark, settings.$media-themes)) {
		@media #{media-queries.$dark} {
			color: rgba(settings.$dark-font-on-background, .6);
		}
	}
}

%text-disabled {
	color: rgba(settings.$font-on-background, .38);

	@if(settings.$theme == light and functions.in-array(dark, settings.$media-themes)) {
		@media #{media-queries.$dark} {
			color: rgba(settings.$dark-font-on-background, .38);
		}
	}
}
